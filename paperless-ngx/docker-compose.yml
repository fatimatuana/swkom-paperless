# Docker Compose file for running paperless from the Docker Hub.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker compose pull'.
# - Run 'docker compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

version: "3.4"
services:
  db:
    image: docker.io/library/postgres:15
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
      
  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    restart: unless-stopped
    depends_on:
      - db
      #- broker
      - rabbitmq #rabbitmq ***** as dependency
      - minio
      - elasticsearch  # elasticsearch as  dependency
    ports:
      - "8080:8000"
    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - data:/usr/src/paperless/data
      - media:/usr/src/paperless/media
      - ./export:/usr/src/paperless/export
      - /c/Users/fatim/Desktop/test-/paperless-ngx/consume:/usr/src/paperless/consume
    env_file: docker-compose.env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_RABBITMQ_HOST: rabbitmq  # Set RabbitMQ host
      PAPERLESS_RABBITMQ_PORT: 5672  # Set RabbitMQ port
      PAPERLESS_RABBITMQ_USER: paperless  # Set RabbitMQ user
      PAPERLESS_RABBITMQ_PASSWORD: paperless  # Set RabbitMQ password
      PAPERLESS_ELASTICSEARCH_URL: http://elasticsearch:9200  # Add this line

      
  nginx:
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - webserver
#      
#  client: //gets 403 error
#    image: nginx
#    ports:
#        - 8000:80
#    volumes:
#        - ./src:/usr/share/nginx/html
      
#  minio:
#    image: minio/minio:RELEASE.2020-05-06T23-23-25Z
#    restart: unless-stopped
#    ports:
#      - "9000:9000"
#      #- "9001:9001"
#    environment:
#      MINIO_ROOT_USER: fatimatuana
#      MINIO_ROOT_PASSWORD: fatimatuana
#    volumes:
#      - minio_data:/data
#     
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ACCESS_KEY: fatimatuana
      MINIO_SECRET_KEY: fatimatuana
    command: server --console-address ":9001" /data
      
  rabbitmq:
    image: rabbitmq:management
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: paperless
      RABBITMQ_DEFAULT_PASS: paperless
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data



volumes:
  data:
  media:
  pgdata:
  redisdata:
#  minio_data:
  minio_storage:
  elasticsearch_data:
